= Symfony branch: mahono =

Author: Matthias Nothhaft <php@mahono.com>

== About ==

Symfony is a pretty good framework - no question. Good work has been done, nice ideas and many useful concepts have found their way into it. I really like it!

But on the other hand things get better by people who are not satisfied with certain parts having visions of "the perfect framework".
This page wants to bring up some of these visions for discussion.
Moreover it is meant as a little guide against confusion of the things happening in the mahono branch
used for developement / proof of concepts / demonstration.

You can [http://trac.symfony-project.com/trac/browser/branches/mahono browse the source] or checkout at http://svn.symfony-project.com/branches/mahono


== Ideas ==

Here is a list of things that are subject of change or introduction.
Some require changes on the framework and some could also be implemented as a plugin - but direct framework support/integration seems to be a better solution.


=== SOA - internal & external communication ===

Service Oriented Architecture is widely known in context of connecting applications running on separate machines and/or platforms.
Be aware that it is not limited to that context but simply an architecture.

Using this approach for '''internal''' communication (between parts and layers within applications) could move project developement to the next level.
A driver based layer to connect internal services to external ones is a logical consequence of that (e.g. REST).

 * Supports (almost forces) developers to write much better code (modularization, encapsulation)
 * Better support for DRY (and don't repeat others: over projects, over companies)
 * Enables to make any part of the application available for external access

Technical notes:

 * We need message management and a transport format (message class).
 * Management should be part (aggregated object) of sfContext


=== Components reloaded ===

Symfony knows components as a part of the presentation layer (light weight actions).
This big name is "burned" for a relatively unimportant thing.
Moreover the terms "module" and "action" are confusing sometimes. (at least me..)

In the context of SOA components are small units providing services.

==== Namespace ====

 * Introduce a layer below project: customer
 * Use this for class and file naming concept, e.g. customer_project_component1


=== Some enhancement ideas for the presentation layer ===

 * Overall background: Separate presentation layer from application layer.
 * Widgets -- views with intelligence
 * Templates and stylesheet concept -- why not making life easier by some conventions?
 * Themes -- change application layout/design by "plug-and-play"
 * Maybe a separated controller / context?
 * SOA for separation to business logic layer


=== Page controller ===

 * Multi action instead of single action.


=== Other stuff ===

 * Move to [http://framework.zend.com/manual/en/coding-standard.html Zend Framework Coding Standard]
 * Move file and class naming to clean dir/filename mapping
 * Write access to modify yml configs -- for an installer and other hot stuff
 * Context related developement -- ready for a small (r)evolution?
 * More teamwork supporting features

