<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 * Copyright (c) 2006 Yahoo! Inc.  All rights reserved.  
 * The copyrights embodied in the content in this file are licensed 
 * under the MIT open source license
 *
 * For the full copyright and license information, please view the LICENSE
 * and LICENSE.yahoo files that was distributed with this source code.
 */

/**
 *
 * @package    symfony
 * @subpackage config
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @author     Mike Salisbury <salisbur@yahoo-inc.com>
 * @version    SVN: $Id$
 */
class sfDefineEnvironmentConfigHandler extends sfYamlConfigHandler
{
  /**
   * Execute this configuration handler.
   *
   * @param  string An absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   */
  public function execute($configFiles)
  {
    // get our prefix
    $prefix = strtolower($this->getParameterHolder()->get('prefix', ''));

    // add dynamic prefix if needed
    if ($this->getParameterHolder()->get('module', false))
    {
      $prefix .= "'.strtolower(\$moduleName).'_";
    }

    // parse the yaml
    $myConfig = $this->parseYamls($configFiles);

    $myConfig = sfToolkit::arrayDeepMerge(
      isset($myConfig['default']) && is_array($myConfig['default']) ? $myConfig['default'] : array(),
      isset($myConfig['all']) && is_array($myConfig['all']) ? $myConfig['all'] : array(),
      isset($myConfig[sfConfig::get('sf_environment')]) && is_array($myConfig[sfConfig::get('sf_environment')]) ? $myConfig[sfConfig::get('sf_environment')] : array()
    );

    $values = $this->getValues($prefix, $myConfig);
    $data = '';
    foreach ($values as $key => $value)
    {
      $data .= sprintf("  '%s' => %s,\n", $key, var_export($value, true));
    }

    // compile data
    $retval = '';
    if ($values)
    {
      $retval = "<?php\n".
                "// auto-generated by sfDefineEnvironmentConfigHandler\n".
                "// date: %s\nsfConfig::add(array(\n%s));\n?>";
      $retval = sprintf($retval, date('Y/m/d H:i:s'), $data);
    }

    return $retval;
  }

  // flatten config values with _ between key levels
  protected static function getValues($prefix, $config, 
                                      $maxdepth=2, $curdepth=0)
  {
    if ($curdepth < $maxdepth && is_array($config))
    {
      $values = array();
      foreach ($config as $key => $value)
      {
        $newprefix = $prefix;
        if ($key[0] != '.')
        {
          $newprefix = $newprefix.$key.'_';
        }
        $values = array_merge($values, 
                              self::getValues($newprefix, $value, 
                                              $maxdepth, $curdepth+1));
      }
      return $values;
    }
    else
    {
      return array(substr($prefix,0,-1) => self::replaceAllConstants($config));
    }
  }

  // replace constants in string values, preserving array structure
  protected static function replaceAllConstants($value)
  {
    if (is_array($value))
    {
      return array_map(array('sfDefineEnvironmentConfigHandler',
                               'replaceAllConstants'), $value);
    }
    else if (is_string($value))
    {
      return self::replaceConstants($value);
    }
    else
    {
      return $value;
    }
  }

/*
  protected function getValues($prefix, $category, $keys)
  {
    if (!is_array($keys))
    {
      list($key, $value) = $this->fixCategoryValue($prefix.strtolower($category), '', $keys);

      return array($key => $value);
    }

    $values = array();

    $category = $this->fixCategoryName($category, $prefix);

    // loop through all key/value pairs
    foreach ($keys as $key => $value)
    {
      list($key, $value) = $this->fixCategoryValue($category, $key, $value);
      $values[$key] = $value;
    }

    return $values;
  }

  protected function fixCategoryValue($category, $key, $value)
  {
    // prefix the key
    $key = $category.$key;

    // replace constant values
    $value = $this->replaceConstants($value);

    return array($key, $value);
  }

  protected function fixCategoryName($category, $prefix)
  {
    // categories starting without a period will be prepended to the key
    if ($category[0] != '.')
    {
      $category = $prefix.preg_replace('/^[^_]+_/', '', $category).'_';
    }
    else
    {
      $category = $prefix;
    }

    return $category;
  }
*/
}
