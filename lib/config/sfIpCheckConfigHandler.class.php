<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 *
 * @package    symfony
 * @subpackage config
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: sfDefineEnvironmentConfigHandler.class.php 1661 2006-08-18 19:51:29Z joesimms $
 */
class sfIpCheckConfigHandler extends sfYamlConfigHandler
{
  /**
   * Execute this configuration handler.
   *
   * @param  string An absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   */
  public function execute($configFiles)
  {
		$prefix = strtoupper($this->getParameterHolder()->get('prefix', 'IP'));

    // parse the yaml
    $myConfig = $this->parseYamls($configFiles);

		$default = isset($myConfig['default']) && is_array($myConfig['default']) ? $myConfig['default'] : array();
		$all = isset($myConfig['all']) && is_array($myConfig['all']) ? $myConfig['all'] : array();
		$env = isset($myConfig[sfConfig::get('sf_environment')]) && is_array($myConfig[sfConfig::get('sf_environment')]) ? $myConfig[sfConfig::get('sf_environment')] : array();
		
		// overwrite all with env
		$myConfig = array_merge($all, $env);

		// overwrite default with env
		$myConfig = array_merge($default, $myConfig);

    if ($myConfig)
    {
      $retval = "<?php\n".
                "// auto-generated by sfIpCheckConfigHandler\n".
                "// date: %s\n%s = %s;\n";
      $retval = sprintf($retval, date('Y/m/d H:i:s'), '$'.$prefix, var_export($myConfig, 1));
    }

    return $retval;
  }
}
